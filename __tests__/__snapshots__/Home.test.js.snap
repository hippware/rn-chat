// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home renders with a couple items 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "rgb(242,243,245)",
        "flex": 1,
      }
    }
  >
    <RCTScrollView
      ListFooterComponent={null}
      ListHeaderComponent={[Function]}
      data={
        Array [
          Object {
            "bot": "1234",
            "id": "1",
            "note": "Wow!",
            "time": 1519253818707,
          },
          Object {
            "bot": "5678",
            "id": "2",
            "post": Object {
              "content": "Really?",
              "id": "1",
              "image": null,
              "loaded": false,
              "profile": null,
              "time": 1519253818707,
              "title": "",
            },
            "time": 1519253818707,
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={2}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReached={[Function]}
      onEndReachedThreshold={0.5}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        />
        <View
          onLayout={[Function]}
          style={null}
        />
        <View
          onLayout={[Function]}
          style={null}
        />
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "rgb(254,92,108)",
        "borderRadius": 27,
        "bottom": 40,
        "height": 54,
        "opacity": 1,
        "position": "absolute",
        "right": 40,
        "shadowOffset": Object {
          "height": 0,
          "width": 2,
        },
        "shadowOpacity": 0.18,
        "shadowRadius": 4,
        "width": 54,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../images/iconCreateBot.png",
          }
        }
        style={undefined}
      />
    </View>
  </View>
</View>
`;

exports[`Home renders with no data 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "rgb(242,243,245)",
        "flex": 1,
      }
    }
  >
    <RCTScrollView
      ListFooterComponent={null}
      ListHeaderComponent={[Function]}
      data={null}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={2}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReached={[Function]}
      onEndReachedThreshold={0.5}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        />
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "rgb(254,92,108)",
        "borderRadius": 27,
        "bottom": 40,
        "height": 54,
        "opacity": 1,
        "position": "absolute",
        "right": 40,
        "shadowOffset": Object {
          "height": 0,
          "width": 2,
        },
        "shadowOpacity": 0.18,
        "shadowRadius": 4,
        "width": 54,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../images/iconCreateBot.png",
          }
        }
        style={undefined}
      />
    </View>
  </View>
</View>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Explore Nearby renders with no data 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <MapView
      animateClusters={true}
      autoZoom={true}
      clusterInitialDimension={30}
      clusterInitialFontSize={12}
      clusterPressMaxChildren={100}
      clusteringEnabled={true}
      containerStyle={Object {}}
      customMapStyle={
        Array [
          Object {
            "elementType": "labels.text",
            "featureType": "administrative",
            "stylers": Array [
              Object {
                "color": "#fe5c6c",
              },
            ],
          },
          Object {
            "elementType": "labels.text.stroke",
            "featureType": "administrative",
            "stylers": Array [
              Object {
                "color": "#ffffff",
              },
            ],
          },
          Object {
            "elementType": "labels.text",
            "featureType": "administrative.land_parcel",
            "stylers": Array [
              Object {
                "color": "#d6949b",
              },
            ],
          },
          Object {
            "elementType": "labels.text.fill",
            "featureType": "administrative.neighborhood",
            "stylers": Array [
              Object {
                "color": "#d6949b",
              },
            ],
          },
          Object {
            "elementType": "geometry.fill",
            "featureType": "landscape.man_made",
            "stylers": Array [
              Object {
                "color": "#fff8f0",
              },
            ],
          },
          Object {
            "elementType": "geometry.fill",
            "featureType": "landscape.natural",
            "stylers": Array [
              Object {
                "color": "#fff8f0",
              },
            ],
          },
          Object {
            "elementType": "geometry.stroke",
            "featureType": "road",
            "stylers": Array [
              Object {
                "visibility": "off",
              },
            ],
          },
          Object {
            "elementType": "labels.text",
            "featureType": "road",
            "stylers": Array [
              Object {
                "color": "#70b0e1",
              },
            ],
          },
          Object {
            "elementType": "labels.text.stroke",
            "featureType": "road",
            "stylers": Array [
              Object {
                "color": "#ffffff",
              },
            ],
          },
          Object {
            "elementType": "labels.icon",
            "featureType": "road.highway",
            "stylers": Array [
              Object {
                "visibility": "off",
              },
            ],
          },
          Object {
            "featureType": "transit",
            "stylers": Array [
              Object {
                "visibility": "off",
              },
            ],
          },
          Object {
            "elementType": "geometry.fill",
            "featureType": "water",
            "stylers": Array [
              Object {
                "color": "#99ddf0",
              },
            ],
          },
        ]
      }
      data={Array []}
      edgePadding={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      extent={512}
      followUser={true}
      fullMap={true}
      height={1334}
      initialRegion={
        Object {
          "latitude": 2,
          "latitudeDelta": 0.04,
          "longitude": 2,
          "longitudeDelta": 0.04,
        }
      }
      locationStore={
        Object {
          "backgroundOptions": Object {
            "activityRecognitionInterval": null,
            "activityType": null,
            "debug": null,
            "desiredAccuracy": null,
            "distanceFilter": null,
            "elasticityMultiplier": null,
            "stationaryRadius": null,
            "stopTimeout": null,
          },
          "fetchResult": 0,
          "location": Object {
            "accuracy": 2,
            "latitude": 2,
            "longitude": 2,
          },
        }
      }
      maxZoom={20}
      minZoom={1}
      onMarkerPress={[Function]}
      onPress={[Function]}
      onRegionChangeComplete={[Function]}
      preserveClusterPressBehavior={true}
      provider="google"
      renderCluster={[Function]}
      renderMarker={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
      textStyle={Object {}}
      width={750}
      wocky={Object {}}
    >
      <Marker
        coordinate={
          Object {
            "latitude": 2,
            "longitude": 2,
          }
        }
        style={
          Object {
            "zIndex": 1000,
          }
        }
        tracksViewChanges={true}
      >
        <View
          style={
            Object {
              "transform": Array [],
            }
          }
        >
          <Image
            source={
              Object {
                "testUri": "../../../images/location-indicator.png",
              }
            }
          />
        </View>
      </Marker>
    </MapView>
    <View
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "bottom": 40,
          "height": 100,
          "left": 30,
          "opacity": 1,
          "position": "absolute",
          "width": 100,
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../images/currentLocationGrey.png",
          }
        }
      />
    </View>
    <View
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgb(254,92,108)",
          "borderRadius": 27,
          "bottom": 40,
          "height": 54,
          "opacity": 1,
          "position": "absolute",
          "right": 40,
          "shadowOffset": Object {
            "height": 0,
            "width": 2,
          },
          "shadowOpacity": 0.18,
          "shadowRadius": 4,
          "width": 54,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <Image
          source={
            Object {
              "testUri": "../../../images/iconCreateBot.png",
            }
          }
        />
      </View>
    </View>
    <View
      style={
        Object {
          "backgroundColor": "#007bff",
          "borderBottomWidth": 1,
          "borderColor": "#006acd",
          "bottom": null,
          "left": 0,
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": -1334,
            },
          ],
        }
      }
    >
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "flex": 1,
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "flex-end",
              "flex": 1,
              "flexDirection": "row",
              "padding": 10,
            }
          }
        >
          <View
            style={
              Object {
                "alignSelf": "stretch",
                "flex": 1,
                "flexDirection": "column",
                "justifyContent": "center",
                "marginLeft": 10,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>
</View>
`;

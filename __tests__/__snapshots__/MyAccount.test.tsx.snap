// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MyAccount renders 1`] = `
<View
  style={
    Array [
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      },
      undefined,
    ]
  }
>
  <BVLinearGradient
    colors={
      Array [
        "rgb(255,255,255)",
        "rgb(241,242,244)",
        "rgb(243,244,246)",
      ]
    }
    locations={
      Array [
        0,
        0.2,
        1,
      ]
    }
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollView
      automaticallyAdjustContentInsets={false}
      contentInset={
        Object {
          "bottom": 0,
        }
      }
      enableAutomaticScroll={true}
      enableResetScrollToCoords={true}
      extraHeight={75}
      extraScrollHeight={0}
      getScrollResponder={[Function]}
      handleOnScroll={[Function]}
      keyboardDismissMode="interactive"
      keyboardOpeningTime={250}
      keyboardSpace={0}
      onScroll={[Function]}
      resetKeyboardSpace={[Function]}
      scrollEventThrottle={1}
      scrollForExtraHeightOnAndroid={[Function]}
      scrollToEnd={[Function]}
      scrollToFocusedInput={[Function]}
      scrollToPosition={[Function]}
      showsVerticalScrollIndicator={true}
      testID="myAccountScrollView"
      viewIsInsideTabBar={false}
    >
      <View>
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "white",
              "justifyContent": "center",
              "paddingBottom": 20,
              "paddingTop": 10,
              "width": "100%",
            }
          }
        >
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "opacity": 1,
              }
            }
          >
            <View>
              <Image
                resizeMode="cover"
                source={
                  Object {
                    "testUri": "../../../images/addPhoto.png",
                  }
                }
                style={
                  Array [
                    Object {
                      "borderRadius": 80,
                      "height": 160,
                      "width": 160,
                    },
                    Object {
                      "borderRadius": 50,
                      "height": 100,
                      "width": 100,
                    },
                  ]
                }
              />
              <Image
                source={
                  Object {
                    "testUri": "../../../images/follower.png",
                  }
                }
                style={
                  Array [
                    Object {
                      "borderColor": "white",
                      "position": "absolute",
                    },
                    Object {
                      "borderRadius": 9,
                      "borderWidth": 2,
                      "bottom": 5,
                      "height": 18,
                      "left": undefined,
                      "position": "absolute",
                      "right": 5,
                      "top": undefined,
                      "width": 18,
                    },
                  ]
                }
              />
            </View>
          </View>
        </View>
        <View
          style={
            Array [
              Object {
                "paddingBottom": 20,
                "paddingLeft": 30,
                "paddingRight": 30,
                "paddingTop": 26,
              },
              Object {
                "opacity": 0.95,
              },
            ]
          }
        >
          <View
            style={
              Array [
                Object {
                  "borderColor": "white",
                  "borderRadius": 2,
                  "shadowOffset": Object {
                    "height": 1,
                    "width": 0,
                  },
                  "shadowOpacity": 0.12,
                  "shadowRadius": 2,
                },
                Object {
                  "backgroundColor": "rgba(255,255,255,1)",
                },
                undefined,
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": undefined,
                    "fontFamily": "Roboto-Medium",
                    "fontSize": 16,
                  },
                  Object {
                    "color": "rgb(63,50,77)",
                    "padding": 15,
                  },
                ]
              }
              testID="profileInfo"
            >
              About
            </Text>
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "rgba(155,155,155,0.15)",
                    "height": 0.5,
                  },
                  undefined,
                ]
              }
            />
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "rgb(253,95,108)",
                      "fontFamily": "Roboto-Regular",
                      "fontSize": 11,
                    },
                    Object {
                      "marginLeft": 80,
                      "marginTop": 10,
                    },
                  ]
                }
              >
                
              </Text>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "padding": 30,
                    },
                    Object {
                      "justifyContent": "center",
                      "paddingTop": 4,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "paddingLeft": 10,
                        "paddingRight": 30,
                        "width": 30,
                      },
                      Object {
                        "height": 40,
                        "marginHorizontal": 10,
                        "width": 40,
                      },
                    ]
                  }
                >
                  <Image
                    source={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                  />
                </View>
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <TextInput
                    allowFontScaling={true}
                    autoCorrect={false}
                    clearButtonMode="while-editing"
                    icon={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                    label="First Name"
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="First Name"
                    placeholderTextColor="rgb(212,212,212)"
                    returnKeyType="next"
                    store={
                      ValidateItem {
                        "errorMessage": "",
                        "isValid": undefined,
                        "key": "firstName",
                        "value": "eric",
                        Symbol(mobx did run lazy initializers): true,
                        Symbol(mobx administration): ObservableObjectAdministration$$1 {
                          "defaultEnhancer": [Function],
                          "keysAtom": Atom$$1 {
                            "diffValue": 0,
                            "isBeingObserved": false,
                            "isPendingUnobservation": false,
                            "lastAccessedBy": 0,
                            "lowestObserverState": 2,
                            "name": "ValidateItem@8.keys",
                            "observers": Set {},
                          },
                          "name": "ValidateItem@8",
                          "target": [Circular],
                          "values": Map {
                            "errorMessage" => "",
                            "value" => "eric",
                            "isValid" => undefined,
                          },
                        },
                      }
                    }
                    style={
                      Object {
                        "color": "rgb(63,50,77)",
                        "flex": 1,
                        "fontFamily": "Roboto-Regular",
                        "fontSize": 36,
                      }
                    }
                    underlineColorAndroid="transparent"
                    value="eric"
                  />
                  <View
                    style={
                      Object {
                        "alignItems": "center",
                        "justifyContent": "center",
                        "width": 30,
                      }
                    }
                  />
                </View>
              </View>
              <View
                style={
                  Object {
                    "backgroundColor": "rgb(63,50,77)",
                    "height": 1,
                    "opacity": 0.2,
                  }
                }
              />
            </View>
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "rgb(253,95,108)",
                      "fontFamily": "Roboto-Regular",
                      "fontSize": 11,
                    },
                    Object {
                      "marginLeft": 80,
                      "marginTop": 10,
                    },
                  ]
                }
              >
                
              </Text>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "padding": 30,
                    },
                    Object {
                      "justifyContent": "center",
                      "paddingTop": 4,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "paddingLeft": 10,
                        "paddingRight": 30,
                        "width": 30,
                      },
                      Object {
                        "height": 40,
                        "marginHorizontal": 10,
                        "width": 40,
                      },
                    ]
                  }
                >
                  <Image
                    source={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                  />
                </View>
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <TextInput
                    allowFontScaling={true}
                    autoCorrect={false}
                    clearButtonMode="while-editing"
                    icon={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                    label="First Name"
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="First Name"
                    placeholderTextColor="rgb(212,212,212)"
                    returnKeyType="next"
                    store={
                      ValidateItem {
                        "errorMessage": "",
                        "isValid": undefined,
                        "key": "firstName",
                        "value": "eric",
                        Symbol(mobx did run lazy initializers): true,
                        Symbol(mobx administration): ObservableObjectAdministration$$1 {
                          "defaultEnhancer": [Function],
                          "keysAtom": Atom$$1 {
                            "diffValue": 0,
                            "isBeingObserved": false,
                            "isPendingUnobservation": false,
                            "lastAccessedBy": 0,
                            "lowestObserverState": 2,
                            "name": "ValidateItem@8.keys",
                            "observers": Set {},
                          },
                          "name": "ValidateItem@8",
                          "target": [Circular],
                          "values": Map {
                            "errorMessage" => "",
                            "value" => "eric",
                            "isValid" => undefined,
                          },
                        },
                      }
                    }
                    style={
                      Object {
                        "color": "rgb(63,50,77)",
                        "flex": 1,
                        "fontFamily": "Roboto-Regular",
                        "fontSize": 36,
                      }
                    }
                    underlineColorAndroid="transparent"
                    value="eric"
                  />
                  <View
                    style={
                      Object {
                        "alignItems": "center",
                        "justifyContent": "center",
                        "width": 30,
                      }
                    }
                  />
                </View>
              </View>
              <View
                style={
                  Object {
                    "backgroundColor": "rgb(63,50,77)",
                    "height": 1,
                    "opacity": 0.2,
                  }
                }
              />
            </View>
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "rgb(253,95,108)",
                      "fontFamily": "Roboto-Regular",
                      "fontSize": 11,
                    },
                    Object {
                      "marginLeft": 80,
                      "marginTop": 10,
                    },
                  ]
                }
              >
                
              </Text>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "padding": 30,
                    },
                    Object {
                      "justifyContent": "center",
                      "paddingTop": 4,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "paddingLeft": 10,
                        "paddingRight": 30,
                        "width": 30,
                      },
                      Object {
                        "height": 40,
                        "marginHorizontal": 10,
                        "width": 40,
                      },
                    ]
                  }
                >
                  <Image
                    source={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                  />
                </View>
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <TextInput
                    allowFontScaling={true}
                    autoCorrect={false}
                    clearButtonMode="while-editing"
                    icon={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                    label="First Name"
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="First Name"
                    placeholderTextColor="rgb(212,212,212)"
                    returnKeyType="next"
                    store={
                      ValidateItem {
                        "errorMessage": "",
                        "isValid": undefined,
                        "key": "firstName",
                        "value": "eric",
                        Symbol(mobx did run lazy initializers): true,
                        Symbol(mobx administration): ObservableObjectAdministration$$1 {
                          "defaultEnhancer": [Function],
                          "keysAtom": Atom$$1 {
                            "diffValue": 0,
                            "isBeingObserved": false,
                            "isPendingUnobservation": false,
                            "lastAccessedBy": 0,
                            "lowestObserverState": 2,
                            "name": "ValidateItem@8.keys",
                            "observers": Set {},
                          },
                          "name": "ValidateItem@8",
                          "target": [Circular],
                          "values": Map {
                            "errorMessage" => "",
                            "value" => "eric",
                            "isValid" => undefined,
                          },
                        },
                      }
                    }
                    style={
                      Object {
                        "color": "rgb(63,50,77)",
                        "flex": 1,
                        "fontFamily": "Roboto-Regular",
                        "fontSize": 36,
                      }
                    }
                    underlineColorAndroid="transparent"
                    value="eric"
                  />
                  <View
                    style={
                      Object {
                        "alignItems": "center",
                        "justifyContent": "center",
                        "width": 30,
                      }
                    }
                  />
                </View>
              </View>
              <View
                style={
                  Object {
                    "backgroundColor": "rgb(63,50,77)",
                    "height": 1,
                    "opacity": 0.2,
                  }
                }
              />
            </View>
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "rgb(253,95,108)",
                      "fontFamily": "Roboto-Regular",
                      "fontSize": 11,
                    },
                    Object {
                      "marginLeft": 80,
                      "marginTop": 10,
                    },
                  ]
                }
              >
                
              </Text>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "padding": 30,
                    },
                    Object {
                      "justifyContent": "center",
                      "paddingTop": 4,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "paddingLeft": 10,
                        "paddingRight": 30,
                        "width": 30,
                      },
                      Object {
                        "height": 40,
                        "marginHorizontal": 10,
                        "width": 40,
                      },
                    ]
                  }
                >
                  <Image
                    source={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                  />
                </View>
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <TextInput
                    allowFontScaling={true}
                    autoCorrect={false}
                    clearButtonMode="while-editing"
                    icon={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                    label="First Name"
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="First Name"
                    placeholderTextColor="rgb(212,212,212)"
                    returnKeyType="next"
                    store={
                      ValidateItem {
                        "errorMessage": "",
                        "isValid": undefined,
                        "key": "firstName",
                        "value": "eric",
                        Symbol(mobx did run lazy initializers): true,
                        Symbol(mobx administration): ObservableObjectAdministration$$1 {
                          "defaultEnhancer": [Function],
                          "keysAtom": Atom$$1 {
                            "diffValue": 0,
                            "isBeingObserved": false,
                            "isPendingUnobservation": false,
                            "lastAccessedBy": 0,
                            "lowestObserverState": 2,
                            "name": "ValidateItem@8.keys",
                            "observers": Set {},
                          },
                          "name": "ValidateItem@8",
                          "target": [Circular],
                          "values": Map {
                            "errorMessage" => "",
                            "value" => "eric",
                            "isValid" => undefined,
                          },
                        },
                      }
                    }
                    style={
                      Object {
                        "color": "rgb(63,50,77)",
                        "flex": 1,
                        "fontFamily": "Roboto-Regular",
                        "fontSize": 36,
                      }
                    }
                    underlineColorAndroid="transparent"
                    value="eric"
                  />
                  <View
                    style={
                      Object {
                        "alignItems": "center",
                        "justifyContent": "center",
                        "width": 30,
                      }
                    }
                  />
                </View>
              </View>
              <View
                style={
                  Object {
                    "backgroundColor": "rgb(63,50,77)",
                    "height": 1,
                    "opacity": 0.2,
                  }
                }
              />
            </View>
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "rgb(253,95,108)",
                      "fontFamily": "Roboto-Regular",
                      "fontSize": 11,
                    },
                    Object {
                      "marginLeft": 80,
                      "marginTop": 10,
                    },
                  ]
                }
              >
                
              </Text>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "padding": 30,
                    },
                    Object {
                      "justifyContent": "center",
                      "paddingTop": 4,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "paddingLeft": 10,
                        "paddingRight": 30,
                        "width": 30,
                      },
                      Object {
                        "height": 40,
                        "marginHorizontal": 10,
                        "width": 40,
                      },
                    ]
                  }
                >
                  <Image
                    source={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                  />
                </View>
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                >
                  <TextInput
                    allowFontScaling={true}
                    autoCorrect={false}
                    clearButtonMode="while-editing"
                    icon={
                      Object {
                        "testUri": "../../../images/iconSubsNew.png",
                      }
                    }
                    label="First Name"
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="First Name"
                    placeholderTextColor="rgb(212,212,212)"
                    returnKeyType="next"
                    store={
                      ValidateItem {
                        "errorMessage": "",
                        "isValid": undefined,
                        "key": "firstName",
                        "value": "eric",
                        Symbol(mobx did run lazy initializers): true,
                        Symbol(mobx administration): ObservableObjectAdministration$$1 {
                          "defaultEnhancer": [Function],
                          "keysAtom": Atom$$1 {
                            "diffValue": 0,
                            "isBeingObserved": false,
                            "isPendingUnobservation": false,
                            "lastAccessedBy": 0,
                            "lowestObserverState": 2,
                            "name": "ValidateItem@8.keys",
                            "observers": Set {},
                          },
                          "name": "ValidateItem@8",
                          "target": [Circular],
                          "values": Map {
                            "errorMessage" => "",
                            "value" => "eric",
                            "isValid" => undefined,
                          },
                        },
                      }
                    }
                    style={
                      Object {
                        "color": "rgb(63,50,77)",
                        "flex": 1,
                        "fontFamily": "Roboto-Regular",
                        "fontSize": 36,
                      }
                    }
                    underlineColorAndroid="transparent"
                    value="eric"
                  />
                  <View
                    style={
                      Object {
                        "alignItems": "center",
                        "justifyContent": "center",
                        "width": 30,
                      }
                    }
                  />
                </View>
              </View>
              <View
                style={
                  Object {
                    "backgroundColor": "rgb(63,50,77)",
                    "height": 1,
                    "opacity": 0.2,
                  }
                }
              />
            </View>
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "padding": 30,
                  },
                  Object {
                    "marginTop": 0,
                  },
                ]
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "paddingLeft": 10,
                      "paddingRight": 30,
                      "width": 30,
                    },
                    Object {
                      "height": 40,
                      "marginHorizontal": 10,
                      "width": 40,
                    },
                  ]
                }
              >
                <Image
                  source={
                    Object {
                      "testUri": "../../../images/blocked.png",
                    }
                  }
                />
              </View>
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 1,
                    "flexDirection": "row",
                    "justifyContent": "center",
                  }
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  numberOfLines={1}
                  style={
                    Array [
                      Object {
                        "color": undefined,
                        "fontFamily": "Roboto-Regular",
                        "fontSize": 18,
                      },
                      Object {
                        "color": "rgb(63,50,77)",
                        "flex": 1,
                      },
                    ]
                  }
                >
                  Blocked Users
                </Text>
              </View>
            </View>
          </View>
        </View>
        <View
          style={
            Object {
              "alignItems": "center",
              "marginVertical": 30,
            }
          }
        >
          Version
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "rgb(253,95,108)",
                    "fontFamily": "Roboto-Regular",
                    "fontSize": 15,
                  },
                  Array [
                    Object {
                      "marginBottom": 15,
                    },
                    undefined,
                  ],
                ]
              }
            >
              Terms of Service
            </Text>
          </View>
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "rgb(253,95,108)",
                    "fontFamily": "Roboto-Regular",
                    "fontSize": 15,
                  },
                  Array [
                    Object {
                      "marginBottom": 15,
                    },
                    undefined,
                  ],
                ]
              }
            >
              Privacy Policy
            </Text>
          </View>
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "rgb(253,95,108)",
                    "fontFamily": "Roboto-Regular",
                    "fontSize": 15,
                  },
                  Array [
                    Object {
                      "marginBottom": 15,
                    },
                    undefined,
                  ],
                ]
              }
            >
              Logout
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;

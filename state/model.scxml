<scxml name="success" version="1.0" xmlns="http://www.w3.org/2005/07/scxml"><!--   node-size-and-position x=0 y=0 w=740 h=1015  -->
    <datamodel>
        <data expr="this.sm.storage" id="storage"></data>
        <data expr="this.sm.xmpp" id="xmppStore"></data>
        <data expr="this.sm.friend" id="friendStore"></data>
        <data expr="this.sm.profile" id="profileStore"></data>
        <data expr="this.sm.message" id="messageStore"></data>
        <data expr="this.sm.model" id="model"></data>
    </datamodel>

    <state id="Root" initial="LoadData">
        <state id="LoadData"><!--   node-size-and-position x=270 y=40 w=75 h=75  -->
            <onentry><promise>storage.load()</promise></onentry>
            <transition event="success" cond="_event.data &amp;&amp;_event.data.user" target="Connect"></transition>
            <transition event="success" cond="!_event.data || !_event.data.user" target="PromoScene"></transition>
            <transition event="failure" target="PromoScene"></transition>
        </state>
        <state id="Connect"><!--   node-size-and-position x=120 y=170 w=80 h=50  -->
            <onentry>
                <promise>xmppStore.connect(_event.data.user, _event.data.password, _event.data.host)</promise>
                <assign location="model.server" expr="_event.data.host"/>
            </onentry>
            <transition event="failure" target="PromoScene"></transition>
            <transition event="success" target="LoadProfile"></transition>
        </state>
        <state id="PromoScene"><!--   node-size-and-position x=450 y=170 w=80 h=50  -->
            <transition event="success" target="Register"></transition>
        </state>
        <state id="Register"><!--   node-size-and-position x=270 y=250 w=80 h=50  -->
            <onentry>
                <promise>xmppStore.register(_event.data.resource, _event.data.provider_data)</promise>
            </onentry>
            <transition event="success" target="Connect"></transition>
        </state>
        <state id="Connected">
            <onentry>
                <on event="disconnect">xmppStore.disconnected</on>
            </onentry>
            <transition event="disconnect" target="PromoScene"/>
            <state id="LoadProfile"><!--   node-size-and-position x=260 y=370 w=80 h=50  -->
                <onentry>
                    <assign location="model.server" expr="_event.data.host"/>
                    <promise>profileStore.loadProfile(_event.data.user)</promise>
                </onentry>
                <transition event="success" target="SetProfile"/>
                <transition event="failure" target="PromoScene"></transition>
            </state>
            <state id="SetProfile">
                <onentry>
                    <assign location="model.profile" expr="_event.data"/>
                </onentry>
                <transition cond="!this.model.profile.handle" target="SignUpScene"></transition>
                <transition cond="this.model.profile.handle" target="Main"></transition>
            </state>
            <state id="SignUpScene"><!--   node-size-and-position x=450 y=280 w=80 h=40  -->
                <onentry>
                </onentry>
                <transition event="success" target="RegisterProfile"><!--   edge-path [Register_Profile]  pointx=0 pointy=15 offsetx=7 offsety=1  --></transition>
            </state>
            <state id="RegisterProfile"><!--   node-size-and-position x=440 y=370 w=100 h=50  -->
                <onentry>
                    <promise>xmppStore.update(_event.data)</promise>
                </onentry>
                <transition event="failure" target="SignUpScene"><!--   edge-path [SignUpScene]  x=460 y=360 pointx=0 pointy=4 offsetx=-10 offsety=5  --></transition>
                <transition event="success" target="LoadProfile"></transition>
            </state>
            <parallel id="Main">
                <state id="LoggedScene"></state>

                <state id="Messaging">
                    <state id="RequestArchive">
                        <onentry>
                            <script>messageStore.requestArchive()</script>
                        </onentry>
                        <transition target="MessagingIdle"/>
                    </state>
                    <state id="MessagingIdle">
                        <onentry><on event="receiveMessage">xmppStore.message</on></onentry>
                        <transition event="receiveMessage" target="MessageReceived"/>
                    </state>
                    <state id="MessageReceived">
                        <onentry>
                            <script>messageStore.receiveMessage(_event.data)</script>
                        </onentry>
                        <transition target="MessagingIdle"/>
                    </state>
                </state>
                <state id="RequestRoster">
                    <onentry>
                        <script>console.log("REQUEST ROSTER")</script>
                        <promise>friendStore.requestRoster()</promise>
                    </onentry>
                </state>
            </parallel>
        </state>
    </state>

</scxml>
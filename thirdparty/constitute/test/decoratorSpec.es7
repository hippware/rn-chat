'use strict'

import { expect } from 'chai'
import constitute, { Dependencies, Lazy, Constitutor, Transient } from '../'

describe('@Dependencies', function () {
  it('should decorate classes with metadata', function () {
    class B {}
    class C {}

    @Dependencies(B, Lazy.of(C))
    class A {
      constructor (b, lazyC) {
        this.b = b
        this.c = lazyC()
      }
    }

    expect(A.constitute).to.be.instanceOf(Constitutor)

    const a = constitute(A)

    expect(a).to.be.instanceOf(A)
    expect(a.b).to.be.instanceOf(B)
    expect(a.c).to.be.instanceOf(C)
  })

  it('should decorate classes when passed a Constitutor', function () {
    class B {}
    class C {}

    @Dependencies(Transient.with([B, Lazy.of(C)]))
    class A {
      constructor (b, lazyC) {
        this.b = b
        this.c = lazyC()
      }
    }

    expect(A.constitute).to.be.instanceOf(Transient)

    const a = constitute(A)

    expect(a).to.be.instanceOf(A)
    expect(a.b).to.be.instanceOf(B)
    expect(a.c).to.be.instanceOf(C)
  })

  it('should decorate methods with metadata', function () {
    class B {}
    class C {}

    Dependencies(B, Lazy.of(C))(A)
    function A (b, lazyC) {
      return {
        b,
        c: lazyC()
      }
    }

    expect(A.constitute).to.be.instanceOf(Constitutor)

    const a = constitute(A)

    expect(a).to.be.an('object')
    expect(a.b).to.be.instanceOf(B)
    expect(a.c).to.be.instanceOf(C)
  })
})
